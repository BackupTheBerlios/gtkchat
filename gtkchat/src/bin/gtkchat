#!/usr/bin/env perl
use strict;
use warnings;
use FindBin;
use lib("$FindBin::Bin/../share/gtkchat/");
use Net::Vypress::Chat;
use Glib ':constants';
use Gtk2 -init;
use Gtk2::GladeXML;
use Gtk2::Helper;
use Gtk2::SimpleList;
use Gtk2::Gdk::Keysyms;
use YAML qw(LoadFile DumpFile);
use Sys::HostIP;
use Data::Dumper;

my $progname = 'GtkChat';
my $execname = lc $progname;
my $achan = '#Main';
my $ver = '0.41';
my $codename = 'Bugs unleashed';

my $sharedir = "$FindBin::Bin/../share/$execname/";
my $cfgdir = "$ENV{'HOME'}/.$execname/";

# Some GladeXML magic for fixing Glade bugs :/
open (GLADE, "<", $sharedir . $execname . '.glade');
my $gladebuf;
while (<GLADE>) { $gladebuf .= $_; }
close (GLADE);

$gladebuf =~ s/<property name="(pixbuf|icon)">/<property name="$1">${sharedir}pixmaps\//g;
my $gladexml = Gtk2::GladeXML->new_from_buffer($gladebuf);
$gladexml->signal_autoconnect_from_package('main');

# Loading config
my $config = cfg_load();

# The non-resizing userlist.
$gladexml->get_widget('hPaned')->child1_resize(1);
$gladexml->get_widget('hPaned')->child2_resize(0);

# textbuffers hash
my %buffer = (
	"#Main" => Gtk2::TextBuffer->new
);
# tooltips hash'es
my (%topic_tips, %user_tips);

# set initial buffer
$gladexml->get_widget('TextView')->set_buffer($buffer{$achan});
$buffer{$achan}->set_text("Welcome to $progname [$ver].\n"
	."Codename \"$codename\".");

my $vyc = Net::Vypress::Chat->new;
$vyc->{'debug'} = $config->{'debug'} || 0;
$vyc->{'port'} = $config->{'port'};
$vyc->{'localip'} = $config->{'localip'} if $config->{'localip'};
$vyc->nick($config->{'nick'});
if ($config->{autoanswer}) {
	$vyc->status($config->{'status'}, $config->{autoanswer});
}
else {
	$vyc->status($config->{'status'});
}
$vyc->startup();

# the icons hash
my %pix;
$pix{'10'} = Gtk2::Gdk::Pixbuf->new_from_file($sharedir.'pixmaps/aAvail.png');
$pix{'11'} = Gtk2::Gdk::Pixbuf->new_from_file($sharedir.'pixmaps/aDND.png');
$pix{'12'} = Gtk2::Gdk::Pixbuf->new_from_file($sharedir.'pixmaps/aAway.png');
$pix{'13'} = Gtk2::Gdk::Pixbuf->new_from_file($sharedir.'pixmaps/aOff.png');
$pix{'00'} = Gtk2::Gdk::Pixbuf->new_from_file($sharedir.'pixmaps/oAvail.png');
$pix{'01'} = Gtk2::Gdk::Pixbuf->new_from_file($sharedir.'pixmaps/oDND.png');
$pix{'02'} = Gtk2::Gdk::Pixbuf->new_from_file($sharedir.'pixmaps/oAway.png');
$pix{'03'} = Gtk2::Gdk::Pixbuf->new_from_file($sharedir.'pixmaps/oOff.png');

$gladexml->get_widget('eNickname')->set_text($vyc->{'nick'}); #set nick
my $UserList = Gtk2::SimpleList->new_from_treeview(
	$gladexml->get_widget('UserTree'),
		'Icon'	=>	'pixbuf',
		'User'	=>	'text',
); # create simplelist

# listen on udp
my $listen = Gtk2::Helper->add_watch ( $vyc->{listen}->fileno, "in",
	\&do_stuff );
# set status on toolbar
$gladexml->get_widget('iStatus')->set_from_pixbuf
	($pix{'1'.$vyc->{'users'}{$vyc->{'nick'}}{'status'}});
$gladexml->get_widget('lStatus')->select_item
	($vyc->{'users'}{$vyc->{'nick'}}{'status'});
$gladexml->get_widget('eStatus')->signal_connect
	('changed' => \&on_eStatus_changed);

# Misc events
my $usertree = $gladexml->get_widget('UserTree');
my $select = $usertree->get_selection;
my $treestore = $usertree->get_model;
$usertree->signal_connect('row-activated' => sub {
	user_selected($select, $usertree, $treestore);
} );

my @text_history = ('');
my ($title, $tRefresh);
my $history_item = 0;

wMain_update(); # update title
Gtk2->main; # go and away!

sub cfg_load { # {{{
	my $restore = shift;
	# Let's load cfg
	my $config;
	if (-e $cfgdir.$execname.'.cfg.yaml' and !$restore) { # {{{
		$config = LoadFile($cfgdir.$execname.'.cfg.yaml');
	}
	else {
		$config = LoadFile($sharedir.$execname.'.cfg.yaml');
	} # }}}

	# Refresh timer
	Glib::Source->remove($tRefresh) if $tRefresh;
	$tRefresh = Glib::Timeout->add($config->{'refresh'}*1000,
		\&tvUsers_refresh);
		
	# Here we set our window title.
	if ($config->{TitleType} eq 'Custom') { # {{{
		$title = $config->{CustomTitle};
	}
	else {
		$title = $gladexml->get_widget('lTitle' 
			. $config->{TitleType})->get_text;
	} # }}}
	
	return $config;
} # }}}
sub cfg_save { # {{{
	mkdir $cfgdir unless -d $cfgdir or -e $cfgdir;
	error_win("$cfgdir is file!\n"
		. "Can't write configuration. "
		. "Please remove that file.", 1) if -f $cfgdir;
	if ($vyc->{'init'}) { # {{{
		$config->{$_} = $vyc->{$_} for (qw(nick port localip));
		$config->{autoanswer} = $vyc->{users}{$vyc->{nick}}{autoanswer};
		$config->{status} = $vyc->{users}{$vyc->{nick}}{status};
	} # }}}
	DumpFile($cfgdir . $execname . '.cfg.yaml', $config);
} # }}}
sub error_win { # {{{
	my ($text, $critical) = @_;
	$gladexml->get_widget('wMain')->destroy;
	my $gError = $gladexml->new_from_buffer($gladebuf, 'dError');
	my $dError = $gError->get_widget('dError');
	$gError->get_widget('lError')->set_text($text);
	if ('close' eq $dError->run) {
		$dError->destroy;
		if ($critical) {
			gtk_main_quit();
			die("Error! $text");
		}
	}
} # }}}
sub change_eTopic { # {{{
	my ($chan, $topic) = @_;
	my $eTopic = $gladexml->get_widget('eTopic');
	$eTopic->set_text($topic);
	$topic_tips{$chan} = Gtk2::Tooltips->new unless defined $topic_tips{$chan}; 
	$topic_tips{$chan}->set_tip($eTopic, $topic, undef);
} # }}}
sub do_stuff { # {{{
	my $buffer;
	my @r = $vyc->readsock;
	my $type = shift @r;

	if ($type eq "chat") { # {{{
		my ($chan, $who, $text) = @r;
		add_text("<$who> $text", $buffer{$chan});
	} # }}}
	elsif ($type eq "topicsend") { # {{{
		my ($chan, $topic) = @r;
		add_text("--- Topic for $chan is \"$topic\"", $buffer{$chan});
		change_eTopic($chan, $topic);
		wMain_update();
	} # }}}
	elsif ($type eq "topic") { # {{{
		my ($chan, $topic) = @r;
		add_text("--- Topic for $chan changed to \"$topic\"",
			$buffer{$chan});
		change_eTopic($chan, $topic);
		wMain_update();
	} # }}}
	elsif ($type eq "who_ack") { # {{{
		my $who = shift @r;
		add_user($who) if !find_user($who);
	} # }}}
	elsif ($type eq "join") { # {{{
		my ($who, $chan, $status) = @r;
		add_text("--> $who joined $chan (". $vyc->num2status($status) .")",
			$buffer{$chan});
		add_user($who) if !find_user($who);
	} # }}}
	elsif ($type eq "part") { # {{{
		my ($who, $chan) = @r;
		add_text("<-- $who parted $chan", $buffer{$chan});
		del_user($who);
	} # }}}
	elsif ($type eq "status") { # {{{
		my ($who, $aa) = @r;
		$aa = ($vyc->{'users'}{$who}{'autoanswer'}) ? " ("
			.$vyc->{'users'}{$who}{'autoanswer'}.")" : '';
		add_text("--- $who changed his status to ".
			$vyc->num2status($vyc->{'users'}{$who}{'status'}).$aa);
		update_user($who);
	} # }}}
	elsif ($type eq "msg_ack") { # {{{
		my ($who, $aa, $status) = @r;
		$aa = ($aa) ? " ($aa)" : '';
		add_text("--- $who got your message in "
			.$vyc->num2status($status)." state${aa}.");
		update_user($who);
	} # }}}
	elsif ($type eq "active") { # {{{
		my $who = shift @r;
		update_user($who);
	} # }}}
	elsif ($type eq "nick") { # {{{
		my ($old, $new) = @r;
		add_text("--- $old changed nick to $new");
		change_user($old, $new);	
	} # }}}
	elsif ($type eq ("msg" || "mass")) { # {{{
		unless ($vyc->{'users'}{$vyc->{'nick'}}{'status'} == 3) {
			my ($user, $msg) = @r;
			# Decide if this is mass message or not.
			my $mass = ($type eq 'mass') ? 'ass m' : '';
			add_text("--- Received m${mass}essage from $user.");

			# Create new message window
			my $gMsg = Gtk2::GladeXML->new_from_buffer($gladebuf, 'wFrom');
			$gMsg->signal_autoconnect_from_package('main');
			my $wMsg = $gMsg->get_widget('wFrom');
			my $str = "M${mass}essage from $user";
			$gMsg->get_widget('lNick')->set_text($str.':');
			$wMsg->set_title($str);

			# For OS compliance - change the newline chars
			$msg =~ s/\r\n/\n/g;
			$msg =~ s/\r/\n/g;
			$gMsg->get_widget('tvMsg')->get_buffer->set_text($msg);
			
			# Signal for reply button.
			$gMsg->get_widget('bReply')->signal_connect('clicked' => sub { # {{{
				$wMsg->destroy;
				compose_msg($user);
			} ); # }}}
			# Signal for quote button.
			$gMsg->get_widget('bQuote')->signal_connect('clicked' => sub { # {{{
				$wMsg->destroy;
				$msg =~ s/^/>/gm;
				$msg = "\n$msg";
				compose_msg($user, $msg);
			} ); # }}}
			# Signal for close button.
			$gMsg->get_widget('bClose')->signal_connect('clicked' => sub { # {{{
				$wMsg->destroy;
			} ); # }}}

			$wMsg->iconify if 
				$vyc->{'users'}{$vyc->{'nick'}}{'status'} == (1 || 2);
			$wMsg->show;
		}
	} # }}}
	return 1;
} # }}}
sub user_selected { # {{{
	my ($selection, $treeview, $treestore) = @_;
	my $row = $selection->get_selected_rows;
	my $iter = $treestore->get_iter($row);
	compose_msg($treestore->get($iter, 1));
} # }}}
sub compose_msg { # {{{
	my ($user, $msg) = @_;
	# Create new message window
	my $gMsg = Gtk2::GladeXML->new_from_buffer($gladebuf, 'wTo');
	$gMsg->signal_autoconnect_from_package('main');
	my $wMsg = $gMsg->get_widget('wTo');
	my $str = "Message to $user";
	$gMsg->get_widget('lNick')->set_text($str.':');
	$wMsg->set_title($str);

	# If message is set then set it on form.
	if (defined($msg)) {
		$gMsg->get_widget('tvMsg')->get_buffer->set_text($msg);
		my $buffer = $gMsg->get_widget('tvMsg')->get_buffer;
		my $iStart = $buffer->get_start_iter;
		$buffer->place_cursor($iStart);	
	}

	# Signal for send button to send msg.
	$gMsg->get_widget('bSend')->signal_connect('clicked' => sub {
# {{{
	my $buffer = $gMsg->get_widget('tvMsg')->get_buffer;
	my $iStart = $buffer->get_start_iter;
	my $iEnd = $buffer->get_end_iter;
	my $msg = $buffer->get_text($iStart, $iEnd, 1);
	$vyc->msg($user, $msg);
	$wMsg->destroy;
# }}}
	} );
	# Signal for mass button.
	$gMsg->get_widget('bMass')->signal_connect('clicked' => sub {
# {{{
	my $buffer = $gMsg->get_widget('tvMsg')->get_buffer;
	my $iStart = $buffer->get_start_iter;
	my $iEnd = $buffer->get_end_iter;
	my $msg = $buffer->get_text($iStart, $iEnd, 1);
	$vyc->mass($msg);
	$wMsg->destroy;
# }}}
	} );
	# Signal for close button.
	$gMsg->get_widget('bClose')->signal_connect('clicked' => sub {
		$wMsg->destroy;
	} );
	$wMsg->show;
} # }}}
sub get_pic { # {{{
	my $user = shift;
	return $pix{ $vyc->{'users'}{$user}{'active'}
		.$vyc->{'users'}{$user}{'status'} };
} # }}}
sub on_eChannel_activate { # {{{
	return 'ok';
} # }}}
sub on_bJoinChannel_clicked { # {{{
	my $gJoinChannel = Gtk2::GladeXML->new_from_buffer($gladebuf,
		'dJoinChannel');
	my $dJoinChannel = $gJoinChannel->get_widget('dJoinChannel');

	my $status = $dJoinChannel->run;
	if ($status eq 'ok') {
		my $eChannel = $gJoinChannel->get_widget('eChannel');
		my $channel = $eChannel->get_text;
		$channel =~ s/^\s*//;
		$channel =~ s/\s*$//;
		if ($channel) {
			$channel =~ s/^#?/#/;
			$vyc->join($channel);
			$dJoinChannel->destroy;
			my $toolChannels = $gladexml->get_widget('toolChannels');
			#$toolChannels->insert(Gtk2::SeperatorToolItem->new, -1);
			#$toolChannels->insert(Gtk2::ToggleToolButton->new, -1);
			$toolChannels->append_widget(
				Gtk2::ToggleButton->new_with_label($channel), '', '');
		}
	}
	else {
		$dJoinChannel->destroy;
	}
	
} # }}}
sub about_win { # {{{
    my $gAbout = $gladexml->new_from_buffer($gladebuf, 'dAbout');
    my $dAbout = $gAbout->get_widget('dAbout');
    $gAbout->get_widget('lHeader')->set_markup("<span size=\"xx-large\"><b>"
    	."$progname $ver</b></span>\n\"$codename\"");
    $dAbout->destroy if ('close' eq $dAbout->run);
} # }}}
sub change_nick { # {{{
	my $eNickname = $gladexml->get_widget('eNickname');
	my $oldnick = $vyc->{'nick'};
	my $nick = $eNickname->get_text;
	$eNickname->set_text(substr($nick, 0, 20)) if length($nick) > 20;
	$vyc->nick($nick);
	add_text("--- $oldnick chaged nick to $nick");
	change_user($oldnick, $nick);
	wMain_update();
} # }}}
sub on_tbChannels_clicked { # {{{
	my $button = shift;
	$button->set_active(TRUE);
} # }}}
sub entry_press { # {{{
#	my $eTalk = $gladexml->get_widget('eTalk');
#	if (defined $text_history[$history_item]) {
#		$eTalk->set_text($text_history[$history_item]);
#		$history_item++;
#	}	
} # }}}
sub add_to_history { # {{{
	my $text = shift;
	splice(@text_history, 1, 0, $text);
} # }}}
sub on_eTalk_activate { # {{{
	my $chan = '#Main';
	my $eTalk = $gladexml->get_widget('eTalk');
	my $text = $eTalk->get_text;
	if ($text) {
		add_to_history($text);
		$eTalk->set_text('');
		if ($text eq "/topic") {
			add_text("--- Topic for $achan is \""
				.$vyc->{'channels'}{$achan}{'topic'}."\"");
		}
		elsif ($text =~ /\/topic (.+)$/) {
			$vyc->topic($achan, $1);
		}
		elsif ($text =~ /\/eval (.*)$/) {
			add_text("Evaluating: $1");
			eval($1);
		}
		elsif ($text =~ /\/system (.*)$/) {
			add_text("Executing: $1");
			add_text(`$1`);
		}
		elsif ($text eq '/dump') {
			add_text(Dumper($vyc));
		}
		elsif ($text eq '/debug') {
			add_text(Dumper($vyc->{'debug'}));
		}
		elsif ($text =~ /\/debug ([012])/) {
			$vyc->{debug} = $1;
			$config->{debug} = $1;
			add_text(Dumper($vyc->{'debug'}));
		}
		elsif ($text eq '/save') {
			add_text("CFG saved");
			cfg_save();
		}
		elsif ($text eq '/help') {
			add_text("Commands: \n"
				. "/topic [topic] - gets/sets topic\n"
				. "/eval perl_cmd - evals expresion as perl\n"
				. "/system shell_cmd - executes command\n"
				. "/dump - dumps \$vyc object\n"
				. "/debug [level] - gets/sets debug level\n"
				. "/save - saves config\n"
				. "/quit - exits"
				);
		}
		elsif ($text eq '/quit') {
			gtk_main_quit();
		}
		elsif ($text =~ /^\//) {
			add_text("Command not found.");
		}
		else {
			$vyc->chat($chan, $text);
		}
	}
} # }}}
sub on_eTalk_key_press_event { # {{{
	my $event = $_[1];
	# We manage up and down keypress
	if ( # {{{
		$event->keyval == $Gtk2::Gdk::Keysyms{Up} ||
		$event->keyval == $Gtk2::Gdk::Keysyms{Down}
	) {
	#	my $text = $gladexml->get_widget('eTalk')->get_text;
	#	add_to_history($text) if $text;
		my $history_max = @text_history;
		
		# If history buffer ain't empty
		if ($history_max != 1) { # {{{

			# On Up keypress increase counter
			if ($event->keyval == $Gtk2::Gdk::Keysyms{Up} &&
				$history_item != $history_max - 1) {
				$history_item++;
			}
			# On Down decrease counter
			elsif ($event->keyval == $Gtk2::Gdk::Keysyms{Down} &&
				$history_item != 0) {
				$history_item--;
			}

			# Then set eTalk
			$gladexml->get_widget('eTalk')->set_text(
				$text_history[$history_item]
			);
		} # }}}
		
		return TRUE;
	} # }}}
	# We want Gtk to manage 'em
	else { # {{{
		return FALSE;
	} # }}}
} # }}}
sub add_text { # {{{
	my ($text, $textview) = @_;
	$textview = $buffer{$achan} unless defined $textview;

	my $iter = $textview->get_end_iter;
	$textview->insert($iter, "\n" . $text);
	Glib::Idle->add(sub { 
		$iter = $textview->get_end_iter;
		$gladexml->get_widget('TextView')->scroll_to_iter($iter, FALSE, TRUE,
			0, 1);
		return TRUE;
	});
} # }}}
sub add_user { # {{{
	my $user = shift;
	push @{$UserList->{'data'}}, [ get_pic($user), $user ];
	bUsers_update();
} # }}}
sub find_user { # {{{
		my $bywhat = shift;
		for (0..@{$UserList->{'data'}}-1) {
		return 1 if ($UserList->{'data'}[$_][1] eq $bywhat);
		}
} # }}}
sub del_user { # {{{
		my $bywhat = shift;
		for (0..@{$UserList->{'data'}}-1) {
			if ($UserList->{'data'}[$_][1] eq $bywhat) {
				splice (@{$UserList->{'data'}}, $_, 1);
				# the problem here is that you *always* iterate over 
				# the whole list.  say you have two items in the list 
				# -- you hit index zero, delete it, and then proceed to
				# index 1, despite the fact that the list only has one 
				# element and index 1 is no longer valid.  so, perl 
				# autovivifies the index and the tie magic winds up 
				# leaving you with an empty row.
				# So we need to do this:
				last; # Stop!
				# Thanks muppet for explanation.
			}
		}
		bUsers_update();
} # }}}
sub change_user { # {{{
		my ($bywhat, $user) = @_;
		for (0..@{$UserList->{'data'}}-1) {
			if ($UserList->{'data'}[$_][1] eq $bywhat) {
				$UserList->{'data'}[$_][0] = get_pic($user);
				$UserList->{'data'}[$_][1] = $user;
				last;
			}
		}
} # }}}
sub update_user { # {{{
		my $user = shift;
		for (0..@{$UserList->{'data'}}-1) {
			$UserList->{'data'}[$_][0] = get_pic($user)
			if ($UserList->{'data'}[$_][1] eq $user);
		}
} # }}}
sub wMain_update { # {{{
		my $topic = ($vyc->{'channels'}{$achan}{'topic'})
			? $vyc->{'channels'}{$achan}{'topic'} : '';
		my $active = 
			$vyc->num2active($vyc->{'users'}{$vyc->{'nick'}}{'active'});
		my $status = 
			$vyc->num2status($vyc->{'users'}{$vyc->{'nick'}}{'status'});
		my $port = $vyc->{'port'};
		my $ip = $vyc->{'localip'};
		$title =~ s/\%name/$progname/g;
		$title =~ s/\%ver/$ver/g;
		$title =~ s/\%nick/$vyc->{'nick'}/g;
		$title =~ s/\%chan/$achan/g;
		$title =~ s/\%topic/$topic/g;
		$title =~ s/\%status/$status/g;
		$title =~ s/\%active/$active/g;
		$title =~ s/\%port/$port/g;
		$title =~ s/\%ip/$ip/g;
		
		$gladexml->get_widget('wMain')->set_title($title);
} # }}}
sub tvUsers_refresh { # {{{
	@{$UserList->{'data'}} = ();
	$vyc->who;
	return TRUE;
} # }}}
sub bUsers_update { # {{{
	my $users = keys %{$vyc->{'users'}};
	$UserList->get_model->set_sort_column_id(1,
		"GTK_SORT_".$config->{'sorting'});
	$gladexml->get_widget('bUsers')->set_label("Users: $users");
} # }}}
sub on_eStatus_changed { # {{{
	my $status = $gladexml->get_widget('eStatus')->get_text;
	$status =~ s/Available/0/;
	$status =~ s/Do Not Disturb/1/;
	$status =~ s/Away/2/;
	$status =~ s/Offline/3/g;
	if ($status ne '') {
		my $autoanswer = '';

		if ($status ne '0' && $config->{autoanswer_on}) {
			my $gStatus = $gladexml->new_from_buffer($gladebuf, 'dStatus');
			my $dStatus = $gStatus->get_widget('dStatus');
			my $eAutoAnswerMessage = $gStatus->get_widget('eAutoAnswerMessage');
			$eAutoAnswerMessage->set_text(
				$vyc->{users}{$vyc->{nick}}{autoanswer}) if
				$vyc->{users}{$vyc->{nick}}{autoanswer};

			$dStatus->run;
			$autoanswer = $eAutoAnswerMessage->get_text;
			$dStatus->destroy;
		}

		$gladexml->get_widget('iStatus')->set_from_pixbuf($pix{'1'.$status});
		$vyc->status($status, $autoanswer);
		wMain_update();
	}
} # }}}
sub on_eTopic_activate { # {{{
	my $eTopic = $gladexml->get_widget('eTopic');
	$vyc->topic($achan, $eTopic->get_text);
} # }}}
sub pref_win { # {{{
	my $switch_to_net = shift;
	# Hell this is messy... Creating window again.
	my $gPref = $gladexml->new_from_buffer($gladebuf, 'dPref');
	my $dPref = $gPref->get_widget('dPref');

	# We get these now, because if we don't change our selection and press OK 
	# they get undef.
	my $TitleType = $config->{'TitleType'};

	# Anyway we need to set custom widget string.
	# We aren't going to lose anything...
	my $eTitleCustom = $gPref->get_widget('eTitleCustom');
	$eTitleCustom->set_text($config->{'CustomTitle'}) 
		if $config->{'CustomTitle'};

	# Now we define current widget behavior
	if ($config->{'TitleType'} eq 'Custom') { # {{{
		$eTitleCustom->set_sensitive(1);
		$gPref->get_widget('rbCustom')->set_active(1);
	}
	else {
		$gPref->get_widget('rb' . $TitleType)->set_active(1);
	}
	$gPref->get_widget('cbAutoanswer')->set_active($config->{autoanswer_on});
	$gPref->get_widget('sbRefresh')->set_value($config->{'refresh'});
	$gPref->get_widget('sbPort')->set_value($vyc->{'port'});
	$gPref->get_widget('ceIp')->set_text($vyc->{'localip'}); # }}}

	# Ip combolist
	my $interfaces = Sys::HostIP->interfaces; # {{{
	my @ips;
	unshift (@ips, $interfaces->{$_}." - ($_)") for (keys %$interfaces);
	$gPref->get_widget('cIp')->set_popdown_strings(@ips); # }}}
	
	# Radio buttons
	$gPref->get_widget('rbX-Chat')->signal_connect('toggled' => sub { # {{{
		$gPref->get_widget('eTitleCustom')->set_sensitive(0);
		$TitleType = 'X-Chat';
	} ); 
	$gPref->get_widget('rbVyc')->signal_connect('toggled' => sub { 
		$gPref->get_widget('eTitleCustom')->set_sensitive(0);
		$TitleType = 'Vyc';
	} ); 
	$gPref->get_widget('rbCustom')->signal_connect('toggled' => sub { 
		$gPref->get_widget('eTitleCustom')->set_sensitive(1);
		$TitleType = 'Custom';
	} ); # }}}

	# Do we wish to warn user about strange ip?
	if ($switch_to_net) { # {{{
		$gladexml->get_widget('nbPreferences')->set_current_page(1);
		$gladexml->get_widget('lIpWarning')->show;
		$gladexml->get_widget('iIpWarning')->show;
	} # }}}
	
	my $response = $dPref->run;
	
	if ($response eq 'ok') {
		# Save title type and custom title
		$config->{'TitleType'} = $TitleType;
		$config->{'CustomTitle'} = $gPref->get_widget('eTitleCustom')->get_text;
		
		$config->{'refresh'} = $gPref->get_widget('sbRefresh')->get_value;
		my ($ceIp) = $gPref->get_widget('ceIp')->get_text 
			=~ /^((\d{1,3}\.){3}\d{1,3})/;
		$vyc->change_net($gPref->get_widget('sbPort')->get_value, $ceIp);
		
		$config->{autoanswer_on} = 
			$gPref->get_widget('cbAutoanswer')->get_active;

		# Destroy preferences window
		$dPref->destroy;
		# Save and reload config
		cfg_save();
		cfg_load();
		# Update main window
		wMain_update();
		# Update userlist
		tvUsers_refresh();
	}
	elsif ($response eq 'cancel') {
		# If we ain't doing nothin' just destroy window
		$dPref->destroy;
	}    
} # }}}
# Set userlist to ASC/DESC
sub asc { # {{{
	$config->{'sorting'} = "ASCENDING";
	bUsers_update();
} # }}}
sub desc { # {{{
	$config->{'sorting'} = "DESCENDING";
	bUsers_update();
} # }}}
# Set activity and update window title
sub active { # {{{
	$vyc->active(1);
	wMain_update();
} # }}}
sub inactive { # {{{
	$vyc->active(0);
	wMain_update();
} # }}}
# Quit chat
sub gtk_main_quit { # {{{
	# Save config
	cfg_save();
	# Get out of network
	$vyc->shutdown() if $vyc->{'init'};
	# Destroy main window.
	Gtk2->main_quit;
} # }}}
